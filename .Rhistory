import arviz  as az
import matplotlib.pyplot as plt
from bokeh.layouts import gridplot
from bokeh.plotting import figure, output_file, show
import numpy as np
import pandas as pd
import pymc3 as pm
import xarray as xr
import warnings
# Data import
df = pd.read_csv("/Users/beegroup/Github/Bayes-M&V/data/Id50_preprocessed.csv")
df.isna().sum()
df = pd.read_csv("/Users/beegroup/Github/Bayes-M&V/data/Id50_preprocessed.csv", index = False)
df = pd.read_csv("/Users/beegroup/Github/Bayes-M&V/data/Id50_preprocessed.csv", index_col = 0)
df["log_v"] = log_electricity = np.log(df["Value"]).values
df["log_v"] = log_electricity = np.log(df["total_electricity"]).values
measured = df[np.isfinite(df["total_electricity"])].Value
measured = df[np.isfinite(df["total_electricity"])].total_electricity
hist, edges = np.histogram(measured, density = True, bins = 50)
def make_plot(title, hist, edges, x):
def make_plot(title, hist, edges, x):
p = figure(title=title, tools='', background_fill_color="#fafafa")
p.quad(top=hist, bottom=0, left=edges[:-1], right=edges[1:],
fill_color="navy", line_color="white", alpha=0.5)
p.y_range.start = 0
p.xaxis.axis_label = 'x'
p.yaxis.axis_label = 'Pr(x)'
p.grid.grid_line_color="white"
return p
x = np.linspace (0, 30000, num=3000)
p1 = make_plot("Electricity hist", hist, edges, x)
measured_log = df[np.isfinite(df["Value"])].log_v
measured_log = df[np.isfinite(df["total_electricity"])].log_v
hist_l, edges_l = np.histogram(measured_log, density = True, bins = 50)
x_l = np.linspace (0, 12, num=20)
p2 = make_plot("Log Electricity Hist", hist_l, edges_l, x_l)
show(gridplot([p1,p2], ncols = 2))
View(df)
cluster = df.cluster
cluster = df.s
cluster
cluster = df.s -1
np.array(a_cluster, b)
[a_cluster, b_cluster]
[a_cluster, b_cluster] = pm.Normal("a_cluster", mu=a, sigma=sigma_a, dims="Cluster_hour")
a = pm.Normal("a", mu=0.0, sigma=10.0)
[a_cluster, b_cluster] = pm.Normal("a_cluster", mu=a, sigma=sigma_a, dims="Cluster_hour")
with pm.Model(coords=coords) as partial_pooling:
cluster_idx = pm.Data("cluster_idx", cluster, dims="obs_id")
# Hyperpriors:
a = pm.Normal("a", mu=0.0, sigma=10.0)
sigma_a = pm.Exponential("sigma_a", 1.0)
# Varying intercepts:
[a_cluster, b_cluster] = pm.Normal("a_cluster", mu=a, sigma=sigma_a, dims="Cluster_hour")
df.cluster = df.cluster -1
cluster = df.cluster
df.s = df.S -1
df.s = df.s -1
clusters = df.s
unique_clusters = cluster.unique()
n_hours = len(df.index)
temperature = df.outdoor_temp
temp_dep_c = df.outdoor_temp_c
temp_dep_h = df.outdoor_temp_h
coords = {"obs_id": np.arange(temperature.size)}
coords["Cluster"] = unique_cluster
coords["Cluster"] = unique_clusters
with pm.Model(coords=coords) as partial_pooling:
cluster_idx = pm.Data("cluster_idx", cluster, dims="obs_id")
# Hyperpriors:
a = pm.Normal("a", mu=0.0, sigma=10.0)
sigma_a = pm.Exponential("sigma_a", 1.0)
# Varying intercepts:
[a_cluster, b_cluster] = pm.Normal("a_cluster", mu=a, sigma=sigma_a, dims="Cluster_hour")
with pm.Model(coords=coords) as partial_pooling:
cluster_idx = pm.Data("cluster_idx", clusters, dims="obs_id")
# Hyperpriors:
a = pm.Normal("a", mu=0.0, sigma=10.0)
sigma_a = pm.Exponential("sigma_a", 1.0)
# Varying intercepts:
[a_cluster, b_cluster] = pm.Normal("a_cluster", mu=a, sigma=sigma_a, dims="Cluster_hour")
with pm.Model(coords=coords) as partial_pooling:
cluster_idx = pm.Data("cluster_idx", clusters, dims="obs_id")
with pm.Model(coords=coords) as partial_pooling:
#cluster_idx = pm.Data("cluster_idx", clusters, dims="obs_id")
# Hyperpriors:
a = pm.Normal("a", mu=0.0, sigma=10.0)
sigma_a = pm.Exponential("sigma_a", 1.0)
# Varying intercepts:
[a_cluster, b_cluster] = pm.Normal("a_cluster", mu=a, sigma=sigma_a, dims="Cluster_hour")
coords
with pm.Model(coords=coords) as partial_pooling:
#cluster_idx = pm.Data("cluster_idx", clusters, dims="obs_id")
# Hyperpriors:
a = pm.Normal("a", mu=0.0, sigma=10.0)
sigma_a = pm.Exponential("sigma_a", 1.0)
